/*******************************************************************************
 * Creator:admin 2024-09-24 13:35:17
 * Description: Think9企业级开发工具 http://yourslc.top Service类
*********************************************************************************/

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using Newtonsoft.Json.Linq;
using Think9.Models;
using Think9.Services.Base;
using Think9.Services.Basic;
using Think9.Services.Com;

namespace Think9.Services.CodeBuild
{
    /// <summary>
    /// Service
    /// </summary>
    public partial class CreateBasedOnViewsService : BaseService<CreateBasedOnViewsModel>
    {
        private string sql;
        private string str;
        private string itemStr;
        private readonly string _split = Think9.Services.Base.BaseConfig.ComSplit;//多选项的字符分割
        private ComService comService = new ComService();
        private ExtraDbService extraDb = new ExtraDbService();//外部数据源
		private ExtraDbEntity extraDbModel;//外部数据源

        #region sql 自定义的统计指标解析为sql语句

        #endregion sql 自定义的统计指标解析为sql语句

        /// <summary>
        /// 获取分页数据并处理Value与Text转化
        /// </summary>
        /// <param name="total">结果集总数</param>
        /// <param name="controlList">查询条件</param>
        /// <param name="pageInfo">页面信息，包括行数、排序等</param>
        /// <param name="user">当前用户信息</param>
        /// <returns></returns>
        public List<dynamic> GetListForPage(ref long total, IEnumerable<ControlEntity> controlList, PageInfoEntity pageInfo, CurrentUserEntity user)
        {
            //获取分页数据
            List<dynamic> list = GetList(ref total, controlList, pageInfo).ToList();
            GetStatsIndex(list);//获取统计指标值
            //获取下拉选择、多选、单选数据源
            IEnumerable<valueTextEntity> selectList = GetSelectList("list", BasicHelp.GetParamObject(user));
            TransformList(selectList, list, user);//处理Value与Text转化

            return list;
        }

        /// <summary>
        /// 获取分页数据
        /// </summary>
        /// <param name="total">结果集总数</param>
        /// <param name="list">查询条件</param>
        /// <param name="pageInfo">页面信息，包括行数、排序等</param>
        /// <returns></returns>
        private IEnumerable<dynamic> GetList(ref long total, IEnumerable<ControlEntity> list, PageInfoEntity pageInfo)
        {
			string order = " ";
			string where = GetSearchWhere(list);
			var model = GetParamSearch(list);
			
			return base.GetPageList(ref total, pageInfo, " * ", "view_indexbasic", where, order, model);
        }

        /// <summary>
        /// 获取数据
        /// </summary>
        /// <param name="list">查询条件</param>
        /// <param name="user">当前用户信息</param>
        /// <returns></returns>
        private IEnumerable<dynamic> GetList(IEnumerable<ControlEntity> list, CurrentUserEntity user = null)
        {
			string where = GetSearchWhere(list);
			string order = "  ";
			var model = GetParamSearch(list);
			return base.GetBySql("SELECT * FROM view_indexbasic " + where + order, model);
        }

        /// <summary>
        /// 获取数据DataTable导出excel
        /// </summary>
        /// <param name="ControlList">查询条件</param>
        /// <param name="user">当前用户信息</param>
        /// <returns></returns>
        private DataTable GetDataTableForExport(IEnumerable<ControlEntity> ControlList, CurrentUserEntity user = null)
        {
            List<dynamic> list = GetList(ControlList, user).ToList();
            if (list == null || list.Count < 1)
            {
                list.Add(new CreateBasedOnViewsModel());//无数据时需加入一条空数据，否则报错
            }
            GetStatsIndex(list);//获取统计指标值
            //获取下拉选择、多选、单选数据源
            IEnumerable<valueTextEntity> selectList = GetSelectList("list", BasicHelp.GetParamObject(user));
            TransformList(selectList, list, user);//处理Value与Text转化

            return DataTableHelp.ListToDataTable<dynamic>(list);//转换DataTable
        }

        /// <summary>
        /// 获取统计指标值
        /// </summary>
        /// <param name="list">数据列表</param>
        /// <param name="user">当前用户</param>
        private void GetStatsIndex(List<dynamic> list, CurrentUserEntity user = null)
        {
			//无统计指标
        }

        /// <summary>
        /// 处理Value与Text转化
        /// </summary>
        /// <param name="SelectList">Value与Text数据列表</param>
        /// <param name="list">数据列表</param>
        /// <param name="user">当前用户</param>
        private void TransformList(IEnumerable<valueTextEntity> SelectList, List<dynamic> list, CurrentUserEntity user = null)
        {
            foreach (CreateBasedOnViewsModel obj in list)
            {

            }
        }

        /// <summary>
        /// 获取rdlc报表的相关数据
        /// </summary>
        /// <param name="rpid">统计表编码</param>
        /// <param name="rpname">统计表名称</param>
        /// <param name="prm">条件参数对象</param>
        /// <returns></returns>
        public RdlcDeviceEntity GetRdlcDevice(string rpid, string rpname, IEnumerable<ControlEntity> controlList)
        {
            string err = "";
            string directory = Directory.GetCurrentDirectory();
            RdlcDeviceEntity device = new RdlcDeviceEntity();

            device.PathRdlc = Path.Combine(directory, "wwwroot\\Reports\\rp_CreateBasedOnViews.rdlc");//rdlc模板文件
            device.PathUserImg = Think9.Services.Base.BaseConfig.GetUserImgPath();//用户图片所在文件夹
            device.ImgNoExist = Think9.Services.Base.BaseConfig.GetImgNoExistPath();//图片不存在时的替代
            //device.MainDt = GetMainDataTable(rpid, rpname);//报表名称
            device.GridDt = GetDataTableForExport(controlList);//列表数据

            return device;
        }

		/// <summary>
		/// 获取下拉选择、多选、单选数据源
		/// 处理列表显示时value与text转化，动态数据源来源于为指标指定的数据规范
		/// </summary>
		/// <param name="from">add、edit或list，list表明从列表页面查询条件跳转而来</param>
		/// <param name="param">条件参数</param>
		/// <returns></returns>
		public IEnumerable<valueTextEntity> GetSelectList(string from, object param)
		{
			DataTable dt = DataTableHelp.NewValueTextDt();


			return DataTableHelp.ToEnumerable<valueTextEntity>(dt);//DataTable转换为IEnumerable
		}

        /// <summary>
        /// 获取查询字符串
        /// </summary>
        /// <param name="list">查询条件list</param>
        /// <returns>返回查询字符串</returns>
        private string GetSearchWhere(IEnumerable<ControlEntity> list)
		{
			string where = " WHERE (1 = 1)";
			return where;
		}

        /// <summary>
        /// 查询条件list转化为Model
        /// </summary>
        /// <param name="list">查询条件list</param>
        /// <returns></returns>
        private CreateBasedOnViewsModel GetParamSearch(IEnumerable<ControlEntity> list)
		{
			
			return new CreateBasedOnViewsModel();
		}

        /// <summary>
        /// 获取对象并向查询条件赋初始值
        /// </summary>
        /// <param name="request">request不为空时（通常为从其他页面打开）</param>
        /// <returns></returns>
        public CreateBasedOnViewsModel GetModel(Microsoft.AspNetCore.Http.HttpRequest request)
        {
            CreateBasedOnViewsModel model = new CreateBasedOnViewsModel();
            if (request != null)
            {

            }
            return model;
        }

        /// <summary>
        /// 获取数据
        /// </summary>
        /// <param name="rpid">统计表编码</param>
        /// <param name="rpname">统计表名称</param>
        /// <returns></returns>
        private DataTable GetMainDataTable(string rpid, string rpname)
        {
            DataTable dt = DataTableHelp.NewReportMainTb();
            DataRow row = dt.NewRow();
            row["ReportID"] = rpid;
            row["ReportName"] = rpname;
            row["ReportParm"] = "";
            row["Title"] = rpname;
            dt.Rows.Add(row);

            return dt;
        }
    }
}